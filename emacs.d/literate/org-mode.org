#+TITLE: org-mode.el

* Description

Custom extensions for org-mode.

* Babel

Fontify code in src blocks.

#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
#+END_SRC

Yes, I really want to evaluate this source block.

#+BEGIN_SRC emacs-lisp
(setq org-confirm-babel-evaluate nil)
#+END_SRC

Use Cider to evaluate src blocks.

#+BEGIN_SRC emacs-lisp
  (require 'ob-clojure)
  (setq org-babel-clojure-backend 'cider)
#+END_SRC

Support execution of scala blocks. I've only glanced at the code, but
it seems like it's wrapping the source in some boiler-plate that
executes arbitrary code blocks and prints the result to the console.

#+BEGIN_SRC emacs-lisp
(require 'scala-mode)
(require 'sbt-mode)
(require 'ob-scala)
#+END_SRC

** Instrumenting src block execution

Keep a buffer-local ring to track the execution times for the 50 most
recent executions of org src blocks.

#+BEGIN_SRC emacs-lisp
  (defvar org-babel-src-block-execution-durations (make-ring 50)
    "A ring that stores the execution durations of the 50 most
    recent src block executions. Each object is a time object in
    the form returned by current-time")
  (make-variable-buffer-local 'org-babel-src-block-execution-durations)
#+END_SRC

Add advice around =org-babel-execute-src-block= to instrument the
execution time. We echo the execution time to the minibuffer and push
the duration onto the ring. Each object in the ring is an object of
the same form returned by =(current-time)=.

#+BEGIN_SRC emacs-lisp
  (defun record-timing-info (orig-fn &optional arg info params)
    "Records the execution duration of an org-babel src block org-babel-execute-src-block-duration"
    (let ((start-time (current-time))
          (original-result (funcall orig-fn arg info params)))
      (let* ((delta (time-subtract (current-time)
				   start-time))
	     (seconds (cadr delta))
	     (micros (nth 2 delta))
	     (millis (/ micros 1000)))
        (ring-insert org-babel-src-block-execution-durations delta)
        (message "Elapsed: %s.%s seconds" seconds millis)
        original-result)))

  (advice-add 'org-babel-execute-src-block :around #'record-timing-info)
#+END_SRC


** Library of Babel

Add named blocks in these files to the Library of Babel (=lob=) so
that they can be used from any src block.

#+BEGIN_SRC emacs-lisp
  (dolist (lob-file '("lob_local.org"))
    (if (file-exists-p lob-file)
	(org-babel-lob-ingest lob-file)
      (warn "'%s' does not exist and will not be added to the Library of Babel" lob-file)))
#+END_SRC

** sh

stderr in =sh= blocks is tricky. We can force the exit status of the
final command run by org-babel to be 0 by always executing the bash
built-in =:= as the final command. (This is just an alias for true.
Stole this idea from [[http://kitchingroup.cheme.cmu.edu/blog/2015/01/04/Redirecting-stderr-in-org-mode-shell-blocks/][here]].)

For example, this code block exits with non-zero status, creates a
warning, and prints nothing in the results block.

#+BEGIN_SRC sh
ls /foo/bar 2>&1
#+END_SRC

#+RESULTS:

But this works, if you redirect stderr to stdout.

#+BEGIN_SRC sh :results output
ls /foo/bar 2>&1
:
#+END_SRC

Here's a cleaner way to do it, using prologues and epilogues
(you can put this in the properties block of a header rather than
repeat it for every block).

#+BEGIN_SRC sh :prologue "exec 2>&1" :epilogue ":"
ls /foo/bar
#+END_SRC

#+RESULTS:
: ls: cannot access '/foo/bar': No such file or directory

Or, even better, let's just make this the default for any =sh= src
block.

#+BEGIN_SRC emacs-lisp
  (setq org-babel-default-header-args:sh
        '((:prologue . "exec 2>&1") (:epilogue . ":")))
#+END_SRC

#+BEGIN_SRC sh
    ls /foo/bar
#+END_SRC

#+RESULTS:
: ls: cannot access '/foo/bar': No such file or directory

Sweet!

** yaml support

There's nothing to do for yaml blocks, just return them as-is.

#+BEGIN_SRC emacs-lisp
  (defun org-babel-execute:yaml (body params) body)
#+END_SRC

** Evil navigation

Mnemoic: 'h' for header, 'b' for block.

*** Headings

#+BEGIN_SRC emacs-lisp
(evil-leader/set-key "hn" 'org-next-visible-heading)
(evil-leader/set-key "hf" 'org-forward-heading-same-level)
(evil-leader/set-key "hb" 'org-backward-heading-same-level)
(evil-leader/set-key "hp" 'org-previous-visible-heading)
#+END_SRC

*** Blocks

#+BEGIN_SRC emacs-lisp
(evil-leader/set-key "bn" 'org-next-block)
(evil-leader/set-key "bp" 'org-previous-block)
#+END_SRC

** ob-async

#+BEGIN_SRC emacs-lisp
  (require 'ob-async)
#+END_SRC

#+BEGIN_SRC sh :async
echo "hi"

#+END_SRC

#+RESULTS:
: hi


* Exporting

#+BEGIN_SRC emacs-lisp
(require 'ox)
#+END_SRC

** Markdown

Support export to Markdown.

#+BEGIN_SRC emacs-lisp
(add-to-list 'org-export-backends 'md)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun replace-stars (i)
    (interactive "n")
    (query-replace (make-string i ?*) (concat ".h" (number-to-string i))))
#+END_SRC

** HTML + Latex

org-mode exports documents that include TeX snippets with a Javascript
header that pulls the MathJax library from an orgmode server. Their
distribution of MathJax is out of date and doesn't support some of the
symbols in the =amssymb= package. Instead of pulling MathJax from
orgmode, we'll pull the latest version directly from a CDN.

#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'ox-html
    (add-to-list 'org-html-mathjax-options '(path "https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML")))
  #+END_SRC

** Super/Sub-scripting

Use LaTeX syntax for super and subscripts. That is, require x_{0}
instead of just x_0. This makes it easier to export files that have
snake_case variable names, or any content that uses underscores.

#+BEGIN_SRC emacs-lisp
  (setq org-export-with-sub-superscripts `{})
#+END_SRC

* Editing

** Add date property

Add the current date as a property to the current heading with =C-c
C-x t=.

#+BEGIN_SRC emacs-lisp
    (defun today-string ()
      "Today's date as an org-mode style string"
      (format-time-string
       (org-time-stamp-format)
       (current-time)))

    (defun mark-today ()
      "Add today's date to this header's properties drawer"
      (interactive)
      (org-set-property
         "date"
         (today-string)))

    (global-set-key (kbd "C-c C-x t") 'mark-today)
  #+END_SRC

** Make org pretty

  #+BEGIN_SRC emacs-lisp

    (require 'org-bullets)
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode)))

    ;; org-beautify-theme is installed in /elpa, not /themes
    ;; We have to specifically add it to the custom-theme-load-path
    (let ((org-beautify-el (car (file-expand-wildcards "~/.emacs.d/elpa/org-beautify*"))))
      (when
          (and (boundp 'custom-theme-load-path) org-beautify-el)
        (add-to-list 'custom-theme-load-path
                     (file-name-as-directory org-beautify-el))))

    (setq org-startup-indented t)

#+END_SRC

** Line-wrapping

Turn on auto-fill mode, which automatically inserts a line break after 80 characters.

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'turn-on-auto-fill)
#+END_SRC

* Searching
Use =C-c C-j= to invoke =org-goto=. Use file-like path completion, and
show up to 10 levels deep.

#+BEGIN_SRC emacs-lisp
  (setq org-goto-interface 'outline-path-completion
        org-outline-path-complete-in-steps nil
        org-goto-max-level 10)
#+END_SRC

Use =C-c l= to store a link to the current location.

#+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-c l") 'org-store-link)
#+END_SRC

* Agenda

The agenda is populated from the organizer file in my home directory.
Activate the agenda view with =C-c a=.

#+BEGIN_SRC emacs-lisp
  (setq org-agenda-file-regexp "\\`[^.].*\\.org\\'")
  (setq org-agenda-files '("~/organizer/" "~/prose/Wiki/Notes/Rolodex.org.gpg"))
  (global-set-key "\C-ca" 'org-agenda)
#+END_SRC

This custom command populates the agenda with only today's items.

#+BEGIN_SRC emacs-lisp
  (setq org-agenda-custom-commands
        '(("d"
           "Just the current day"
           ((agenda ""))
           ((org-agenda-span 1)))))
#+END_SRC
* Quick-Note taking

** Capturing

Use =org-capture= to quickly capture notes and stash them in
=~/organizer.org= for refiling later.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c c") 'org-capture)
  (setq org-default-notes-file "~/organizer.org")
#+END_SRC

*** Custom Templates

Set up our custom templates.

#+BEGIN_SRC emacs-lisp
  (defvar org-capture-templates '())
#+END_SRC

When inserting raw text into a capture template, turn off
autocompletion with helm. Otherwise, it's too cumbersome to
quote-insert whitespace into a string with multiple words.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'helm-completing-read-handlers-alist '(org-capture-fill-template))
#+END_SRC

**** Spanish Vocabulary Word

#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-capture-templates
        '("v" "Vocabulario - Sustantivo" table-line (file+headline "~/prose/Wiki/Notes/Spanish/Vocab.org" "Sustantivos")
           "|%^{spanish} | %^{english}| %t |"))
#+END_SRC

**** Meeting


#+BEGIN_SRC emacs-lisp
    (add-to-list 'org-capture-templates
	  '("m" "Meeting" entry (file+headline "~/organizer/devlog.org" "Meetings")
             "** %^{Title}
    :PROPERTIES:
    :date:	%t
    :END:
    %?" :jump-to-captured :immediate-finish))
#+END_SRC

#+RESULTS:
| m | Meeting | entry | (file+headline ~/organizer/devlog.org Meetings) | ** %^{Title} |



** Refiling

Use =org-refile= to move a heading somewhere else. Default binding is
=C-c C-w=. You can also use =C-u C-c C-w= to jump to a target, like
just =org-goto=.

Look for candidates in the current buffer as well as all agenda
files. ~(:maxlevel . 10)~ controls how deep in the tree we look.

#+BEGIN_SRC emacs-lisp
  (setq org-refile-use-outline-path t)
  (setq org-outline-path-complete-in-steps nil)
  (setq org-refile-targets '((nil . (:maxlevel . 10))
                             (org-agenda-files :maxlevel . 9)))
#+END_SRC

Sometimes, we want to move this heading to a different file
altogether. =org-refile-foreign= prompts for a file and then calls
=org-refile= after temporarily overriding org-refile-targets.

#+BEGIN_SRC emacs-lisp
  (defun org-refile-foreign (&optional target-file-name)
    "Prompt for the name of a different file in which to org-refile"
    (interactive)
    (let* ((target-file (or target-file-name (helm-read-file-name "Destination: ")))
           (org-refile-targets `(((,target-file) . (:maxlevel . 10)))))
      (org-refile)))
#+END_SRC

Sometimes we know exactly where we want to refile. For example, when
importing captures, we always want to put them in the main organizer
file under the Captures heading. This function takes a file and the
name of a headline as the refile target.

#+BEGIN_SRC emacs-lisp
  (defun org-refile-in-fixed-location (file headline)
    "Refile under HEADLINE (must be exact match) in FILE"
    (let ((pos (save-excursion
                 (find-file file)
                 (org-find-exact-headline-in-buffer headline))))
      (org-refile nil nil (list headline file nil pos))))
#+END_SRC

** Importing captures from Gmail

I've got a label in Gmail named =Capture= which catches any messages
from myself with =[Org]= in the subject line. We use gnus to fetch
every article in the =Capture= group, then parse the article to
extract a title and any [tags] in the subject (not currently making
use of the tags), the body of the capture, and the timestamp.

First, we open the "Capture" group. Then we iterate through every
unread article, select it, and extract the specification for a new
org-mode heading as an alist.

We then pass this alist to =org-email-capture-file-in-organizer=,
which creates stashes the entry in my organizer.

At the end we teardown by killing the Summary and Article buffers,
then exit gnus. This teardown happens unconditionally, as does the
launching of gnus on invocation. TODO: write some smarter logic to
avoid opening and closing gnus if gnus is already open when this
function is invoked.

#+BEGIN_SRC emacs-lisp
  (defun org-email-capture-pull-from-gmail ()
    "Import everything in the Capture folder from Gmail and stash
  it in my organizer file."
    (interactive)
    (save-excursion
      (gnus)
      (gnus-group-read-group nil t "Capture")
      (gnus-summary-limit-to-unread)
      (if (> (count-words (point-min) (point-max)) 0) ;; >= 1 unread message
          (gnus-summary-iterate 100
            (gnus-summary-select-article)
            (with-current-buffer gnus-article-buffer
              (let* ((article-info (org-email-capture-parse-article-current-buffer)))
                (message "[org-email-capture] Parsed capture: %s" article-info)
                (org-email-capture-file-in-organizer article-info)))))
      (kill-buffer gnus-article-buffer)
      (set-buffer gnus-summary-buffer)
      (gnus-summary-exit)
      (gnus-group-exit)))
#+END_SRC

*** Parsing

The =org-email-capture-parse-article-current-buffer= function assumes that the current
buffer is visiting a gnus-article. It extracts an alist with the
following keys.

1. subject
2. date
3. content
4. tags

#+BEGIN_SRC emacs-lisp
  (ert-deftest test-org-email-capture-parse-article ()
    "Test that we can parse the fields from a gnus article as an Org email capture"
    (let ((article-body "From: Andrew Stahlman <andrew.stahlman@gmail.com>
  Subject: [Org] [task] Get 3 account recovery codes from Google
  To: andrew.stahlman@gmail.com
  Date: Thu, 1 Dec 2016 19:22:42 -0800 (1 day, 12 hours, 7 minutes ago)

  Getting locked out in Europe would have been tough


  "))
      (save-excursion
        (with-temp-buffer
          (progn
            (goto-char 0)
            (insert article-body)
            (goto-char 0))
          (let ((article-info (org-email-capture-parse-article-current-buffer)))
            (should (equal "Get 3 account recovery codes from Google"
                           (cadr (assoc 'subject article-info))))
            (should (equal '("task")
                           (cadr (assoc 'tags article-info))))
            (should (equal "Thu, 1 Dec 2016 19:22:42 -0800"
                           (cadr (assoc 'date article-info))))
            (should (equal "Getting locked out in Europe would have been tough"
                           (cadr (assoc 'content article-info)))))))))

    (defun org-email-capture-parse-article-current-buffer ()
      "Read the content of the gnus article in the current buffer
  and return an alist with the date and contents. The alist looks
  like this:

  '((date DATE-STR)
    (subject SUBJECT)
    (tags TAGS-LIST)
    (content CONTENT))"
      (interactive)
      (let (date-string subject content)
        (let* ((subject-and-tags (org-email-capture-parse-tags-and-subject))
               (date-re "Date: \\(\\w\\{3\\}, [0-9]\\{1,2\\} \\w\\{3\\} [0-9]\\{4\\} [0-9]\\{1,2\\}:[0-9]\\{2\\}:[0-9]\\{2\\} [+-][0-9]\\{4\\}\\)"))
          (save-excursion
            (beginning-of-buffer)
            (search-forward-regexp date-re)
            (setq date-string (match-string-no-properties 1))
            (next-line)
            (beginning-of-line)
            (setq content (s-trim
                           (buffer-substring-no-properties (point) (point-max))))
            `((date ,date-string)
              (subject ,(cdr (assq 'subject subject-and-tags)))
              (tags ,(cdr (assq 'tags subject-and-tags)))
              (content ,content))))))

  (defun org-email-capture-parse-tags-and-subject ()
    (interactive)
    (search-forward "Subject:")
    (let (subject (all-tags nil))
      (while (re-search-forward "\\[\\([^]]+\\)\\]" nil t)
        (push (match-string-no-properties 1) all-tags))
      (setq tags (filter (lambda (tag) (not (string-match "org" tag))) all-tags))
      (setq subject (s-trim (buffer-substring-no-properties (point) (line-end-position))))
      `((tags . ,tags)
        (subject . ,subject))))
#+END_SRC

#+RESULTS:
: org-email-capture-parse-tags-and-subject

*** Filing

#+BEGIN_SRC emacs-lisp
  (defconst org-email-capture-target-file "~/organizer/main.org")

  (defun org-email-capture-file-in-organizer (capture-info)
    "Take the capture-info and put it in main.org"
    (interactive)
    (with-temp-buffer
      (progn
        (org-mode)
        (org-insert-heading)
        (insert (cadr (assoc 'subject capture-info)))
        (org-return-indent)
        (when (assoc 'content capture-info)
          (insert (cadr (assoc 'content capture-info))))
        (org-set-property "capture-date" (cadr (assoc 'date capture-info)))
        (org-back-to-heading)
        (org-refile-in-fixed-location org-email-capture-target-file "Captures"))))
#+END_SRC

#+RESULTS:
: org-email-capture-file-in-organizer

* Email

#+BEGIN_SRC emacs-lisp
  (require 'org-mime)
#+END_SRC

* Homeless

Where should these go?

#+BEGIN_SRC emacs-lisp
  (defun pretty-print-mesos-timestamp (mesos-time)
    (format-time-string "%Y-%m-%d %T" (seconds-to-time (fround mesos-time))))
#+END_SRC

* Common Errors

** Invalid function: org-babel-header-args-safe-fn

=byte-recompile-file ob-R.el= as described [[http://irreal.org/blog/?p=4295][here]].

** Invalid function: org-with-silent-modifications

Re-install org from ELPA *before* any org-functions have been called.
See [[http://tonyballantyne.com/tech/elpa-org-mode-and-invalid-function-org-with-silent-modifications/][this]] blog post.

* Flashcards

Experimenting with [[http://orgmode.org/worg/org-contrib/org-drill.html][org-drill]] for spaced repetition training.

#+BEGIN_SRC emacs-lisp
(require 'org-drill)
#+END_SRC

** Example - Spanish Phrases

Any entry marked with the :drill: tag is available for review. The
entry is only picked up if it has content. The subheading is initially
hidden, and it too cannot be empty.

*** Spanish - Verb                                                  :drill:
SCHEDULED: <2016-12-15 Thu>
:PROPERTIES:
:ID:       1310A6D4-8B0C-4BC3-9572-8E1FEBE5E658
:DRILL_LAST_INTERVAL: 4.0
:DRILL_REPEATS_SINCE_FAIL: 2
:DRILL_TOTAL_REPEATS: 1
:DRILL_FAILURE_COUNT: 0
:DRILL_AVERAGE_QUALITY: 4.0
:DRILL_EASE: 2.5
:DRILL_LAST_QUALITY: 4
:DRILL_LAST_REVIEWED: [2016-12-11 Sun 13:05]
:END:
compartir

**** English
to share

* Patches

** TODO ob-clojure.el

The Cider API changed recently, so [[http://orgmode.org/w/org-mode.git?p=org-mode.git;a=commitdiff;h=4eccd7c7b564874e0e13513e06161e657832ef49][this commit]] needs to be applied
locally in emacs.d/elpa/org-$version/ob-clojure.el until it gets
pushed to ELPA. TODO: Move this to emacs.d/patches, or remove it if it
is no longer needed.
* Random TODO Reminders
Pop up a random TODO from my agenda files once a day.

#+BEGIN_SRC emacs-lisp
  (require 'org-random-todo)
  (setq org-random-todo-how-often (* 24 60 60))
  (org-random-todo-mode 1)
#+END_SRC
