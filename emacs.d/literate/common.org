#+TITLE: common.org
#+DESCRIPTION: General editing enhancements live here.

* nyan-mode
Use that stupid nyan-cat as a visual indicator of vertical position in
buffer.

#+BEGIN_SRC emacs-lisp
  (nyan-mode 1)
#+END_SRC

* Whitespace

Always use spaces to indent.

#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
#+END_SRC

Always highlight trailing whitespace and mixed spaces and tabs.

#+BEGIN_SRC emacs-lisp
  (global-whitespace-mode)
  (setq whitespace-style '(face trailing space-before-tab space-after-tab))
#+END_SRC

Put a newline at the end of the file before saving.

#+BEGIN_SRC emacs-lisp
  (setq require-final-newline t)
#+END_SRC

#+RESULTS:
: t


* Auto-completion

Turn on company mode in all buffers.

#+BEGIN_SRC emacs-lisp
  (require 'company)
  (add-hook 'after-init-hook 'global-company-mode)
#+END_SRC

Use helm as fronted for completion.

#+BEGIN_SRC emacs-lisp
(eval-after-load 'company
  '(progn
     (define-key company-mode-map (kbd "C-:") 'helm-company)
     (define-key company-active-map (kbd "C-:") 'helm-company)))
#+END_SRC

#+RESULTS:
: helm-company


* Paredit

Kill an s-exp with =C-k= in evil-mode.

#+BEGIN_SRC emacs-lisp
  (evil-define-key 'insert paredit-mode-map (kbd "C-k") 'paredit-kill)
#+END_SRC

* Helm

First, turn Helm on and make sure we use it to execute commands.

#+BEGIN_SRC emacs-lisp
  (helm-mode 1)
  (global-set-key (kbd "M-x") 'helm-M-x)
#+END_SRC

Make sure we can use =C-w= to delete backwards in Helm.

#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'helm
    (define-key helm-map (kbd "C-w") 'evil-delete-backward-word))
#+END_SRC

** Opening files

Use Helm to search for Files in Directories or Projects.

*** File

Use Helm completion for =find-file=.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-f") 'helm-find-files)
#+END_SRC

*** Directory

Fuzzy-search for all files in the current subtree using
=helm-find-in-directory=. ([[http://blog.jenkster.com/2013/10/finding-files-in-emacs-helm.html][Credit]])

#+BEGIN_SRC emacs-lisp
  (defun helm-find-in-directory ()
   "Fuzzy search in the current subtree, like Vim's Ctrl-P"
   (interactive)
   (helm :sources '(helm-source-findutils)
         :buffer "*helm-findutils*"))

  (global-set-key (kbd "C-x C-d") 'helm-find-in-directory)
#+END_SRC

*** Project

Fuzzy-search for all files in the current git repository with
=helm-browse-project=.

#+BEGIN_SRC emacs-lisp
  (require 'helm-ls-git)
  (global-set-key (kbd "C-x C-p") 'helm-browse-project)
#+END_SRC

*** Recent Files, Buffers, etc.

Use =C-x C-r= to invoke =helm-for-files=, which searches recent
buffers and files as well as files under the current directory.

#+BEGIN_SRC emacs-lisp
  (recentf-mode 1)
  (setq recentf-max-menu-items 15)
  (global-set-key (kbd "C-x C-r") 'helm-for-files)
#+END_SRC

** git-grep

Use =C-c g= to invoke incremental git-grep via Helm.
#+BEGIN_SRC emacs-lisp
(require 'helm-git-grep)
(global-set-key (kbd "C-c g") 'helm-git-grep)
#+END_SRC

Invoke =helm-git-grep= from isearch.

#+BEGIN_SRC emacs-lisp
(define-key isearch-mode-map (kbd "C-c g") 'helm-git-grep-from-isearch)
#+END_SRC

Invoke =helm-git-grep= from other helm.

#+BEGIN_SRC emacs-lisp
(eval-after-load 'helm
  '(define-key helm-map (kbd "C-c g") 'helm-git-grep-from-helm))
#+END_SRC

** Navigating with the mark ring


#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-h SPC") 'helm-all-mark-rings)
#+END_SRC

#+RESULTS:
: helm-all-mark-rings

* YAML

Use yaml-mode when editing =.sls= (Salt stack config) and =.yaml=
files.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.yaml\\'" . yaml-mode))
  (add-to-list 'auto-mode-alist '("\\.sls\\'" . yaml-mode))
#+END_SRC

* Package Repositories

This is a fix for errors like: "Fatal error: the TLS connection was
non-properly terminated" when trying to download packages from
marmalade and MELPA over SSL. See [[https://github.com/nicferrier/elmarmalade/issues/55#issuecomment-166271364][this comment]] for a full explanation.

The gnutls certificate store doesn't trust the CA for =marmalade.org=
or =melpa.org=. We can force it to trust the CA using the gnutls-cli
with the trust on first use flag to add the host to the list in
=.gnutls/known_hosts=.

#+BEGIN_SRC sh :results output
    gnutls-cli --tofu melpa.org
#+END_SRC

#+RESULTS:
#+begin_example
Processed 173 CA certificate(s).
Resolving 'melpa.org'...
Connecting to '104.236.16.183:443'...
- Certificate type: X.509
- Got a certificate list of 2 certificates.
- Certificate[0] info:
 - subject `CN=melpa.org', issuer `C=US,O=Let's Encrypt,CN=Let's Encrypt Authority X3', RSA key 2048 bits, signed using RSA-SHA256, activated `2016-11-07 09:30:00 UTC', expires `2017-02-05 09:30:00 UTC', SHA-1 fingerprint `34caf2f55155e285e3e99272a104fc44770f233a'
	Public Key ID:
		e9326f480dd5962560d2b5cb57352aeff4289103
	Public key's random art:
		+--[ RSA 2048]----+
		|      ..o+oo.  ..|
		|       oo +o  ...|
		|       . E.. ..  |
		|      .  o..+.   |
		|       oS o+.o   |
		|      ...  .= o  |
		|     .o..  . o . |
		|      .+.   .    |
		|       ..        |
		+-----------------+

- Certificate[1] info:
 - subject `C=US,O=Let's Encrypt,CN=Let's Encrypt Authority X3', issuer `O=Digital Signature Trust Co.,CN=DST Root CA X3', RSA key 2048 bits, signed using RSA-SHA256, activated `2016-03-17 16:40:46 UTC', expires `2021-03-17 16:40:46 UTC', SHA-1 fingerprint `e6a3b45b062d509b3382282d196efe97d5956ccb'
- Status: The certificate is trusted. 
- Description: (TLS1.2)-(ECDHE-RSA-SECP256R1)-(AES-128-GCM)
- Session ID: C4:D2:B3:20:74:3C:4A:6D:99:EF:26:DC:F8:42:7E:F5:19:DC:C9:B5:6F:EB:CF:51:D1:84:C8:31:20:26:A1:9E
- Ephemeral EC Diffie-Hellman parameters
 - Using curve: SECP256R1
 - Curve size: 256 bits
- Version: TLS1.2
- Key Exchange: ECDHE-RSA
- Server Signature: RSA-SHA256
- Cipher: AES-128-GCM
- MAC: AEAD
- Compression: NULL
- Options: safe renegotiation, OCSP status request,
- Handshake was completed

- Simple Client Mode:

#+end_example

#+BEGIN_SRC sh
  awk -F'|' '{print $3}' ~/.gnutls/known_hosts
#+END_SRC

#+RESULTS:
| marmalade-repo.org |
| stable.melpa.org   |
| melpa.org          |

[[https://blogs.fsfe.org/jens.lechtenboerger/2014/03/23/certificate-pinning-for-gnu-emacs/%20%20][Apparently]] =net/gnutls= is vulernable to MITM attacks, so we disable
it.

TODO: Why did I do this? Trying to load email through =gnus= results
in an error when =gnutls-available-p= is called.

#+BEGIN_EXAMPLE
  (if (fboundp 'gnutls-available-p)
      (fmakunbound 'gnutls-available-p))
#+END_EXAMPLE

#+BEGIN_SRC emacs-lisp
  (defun gnutls-available-p ()
    nil)
#+END_SRC

Instead, we use the =gnutls-cli= and =--strict-tofu= to trust hosts in
=~/.gnutls/known_hosts=. (See above for bootstrapping procedure.)

#+BEGIN_SRC emacs-lisp
  (setq tls-program '("gnutls-cli --strict-tofu -p %p %h")
      starttls-extra-arguments '("--strict-tofu"))
#+END_SRC

Similarly, we use =gnutsl-cli= with certificate pinning when reading
email, instead of using s_client. (Again, I'm trusting [[https://blogs.fsfe.org/jens.lechtenboerger/2014/03/23/certificate-pinning-for-gnu-emacs/%20%20][this guy]]).

#+BEGIN_SRC emacs-lisp
  (setq imap-ssl-program '("gnutls-cli --strict-tofu -p %p %s")
      smtpmail-stream-type 'starttls)
#+END_SRC

* yasnippet

Turn on yasnippet globally.

#+BEGIN_SRC emacs-lisp
(require 'yasnippet)
(yas-global-mode 1)
#+END_SRC

* Packaging

Use [[https://github.com/purcell/flycheck-package][flycheck-package]] to lint the source of Emacs packages.

#+BEGIN_SRC emacs-lisp
(eval-after-load 'flycheck
  '(flycheck-package-setup))
#+END_SRC

* Email

See [[file:~/.gnus::(setq%20gnus-select-method][~/.gnus]] for more configuration.

#+BEGIN_SRC emacs-lisp
  (setq send-mail-function 'smtpmail-send-it
	smtpmail-debug-info t)
#+END_SRC

Sometimes when Gmail's certificate changes I need to manually connect
with gnutls-cli and trust the new certificate, like this:

#+BEGIN_SRC sh
gnutls-cli --verbose --starttls --tofu -p 587 smtp.gmail.com
#+END_SRC

This will initiate a connection. Type the following commands to
negotiate a TLS session:

1. ehlo hostname
2. starttls
3. ^D (Ctrl-D)

Then 'y' to trust the new certificate.

* git
** Linking to Github

Generate links to a specific commit rather than referencing a
branch. That is, generate links like this:

- https://github.com/apache/incubator-airflow/blob/f5462c78ff38ec59ec30c688097ff5bb3b3541bb/airflow/jobs.py#L1905

Not this:

- https://github.com/apache/incubator-airflow/blob/master/airflow/jobs.py#L1905

#+BEGIN_SRC emacs-lisp
(setq git-link-use-commit t)
#+END_SRC

* Faces

#+BEGIN_SRC emacs-lisp
  (defun what-face (pos)
    "Which font face is under point?"
    (interactive "d")
    (let ((face (or (get-char-property pos 'read-face-name)
                    (get-char-property pos 'face))))
      (if face (message "Face: %s" face) (message "No face at %d" pos))))
#+END_SRC

#+RESULTS:
: what-face
